{"version":3,"sources":["webpack://framedList/webpack/bootstrap","webpack://framedList/../node_modules/webpack/buildin/harmony-module.js","webpack://framedList/../src/core/directives/index.js","webpack://framedList/../src/core/directives/on-scroll.directive.js","webpack://framedList/../src/core/index.js","webpack://framedList/../src/core/services/index.js","webpack://framedList/../src/core/services/utils.service.js","webpack://framedList/../src/index.js","webpack://framedList/../src/lazy-list/index.js","webpack://framedList/../src/lazy-list/lazy-list.component.js","webpack://framedList/../src/list-item/index.js","webpack://framedList/../src/list-item/list-item.directive.js","webpack://framedList/../src/list/index.js","webpack://framedList/../src/list/list.component.js"],"names":[],"mappings":";;QAAA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;QAEA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;;;QAGA;QACA;;QAEA;QACA;;QAEA;QACA;QACA;QACA,0CAA0C,gCAAgC;QAC1E;QACA;;QAEA;QACA;QACA;QACA,wDAAwD,kBAAkB;QAC1E;QACA,iDAAiD,cAAc;QAC/D;;QAEA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA,yCAAyC,iCAAiC;QAC1E,gHAAgH,mBAAmB,EAAE;QACrI;QACA;;QAEA;QACA;QACA;QACA,2BAA2B,0BAA0B,EAAE;QACvD,iCAAiC,eAAe;QAChD;QACA;QACA;;QAEA;QACA,sDAAsD,+DAA+D;;QAErH;QACA;;;QAGA;QACA;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAA+C;;AAExC;AACP;AACA;;AAEA,2CAA2C,6DAAQ,E;;;;;;;;;;;;ACNnD;AAAA;AAAa;;AAEN;AACP;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,WAAW;AACtC,aAAa;;AAEb;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA,CAAC,E;;;;;;;;;;;;ACnBD;AAAA;AAAA;AAAA;AAAkD;AACJ;;AAEvC;AACP,IAAI,gEAAoB;AACxB,IAAI,4DAAkB;AACtB,G;;;;;;;;;;;;ACNA;AAAA;AAAA;AAAsC;;AAE/B;;AAEP,oCAAoC,oDAAK,E;;;;;;;;;;;;ACJzC;AAAA;AAAa;;AAEN;AACP;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;;AAEA;AACA;AACA;AACA;;AAEA,CAAC,E;;;;;;;;;;;;AChDD;AAAA;AAAA;AAAA;AAAA;AAAa;;AAEqB;AACS;AACT;AACS;;AAE3C;AACA,IAAI,gDAAU;AACd,IAAI,yDAAc;AAClB,IAAI,gDAAU;AACd,IAAI,yDAAc;AAClB;;AAEA;AACA,wIAAwI,IAAI;AAC5I;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,wC;;;;;;;;;;;;;AC5BA;AAAA;AAAA;AAAwD;;AAEjD;AACP;AACA;AACA;AACA;;AAEA,qCAAqC,sEAAiB,E;;;;;;;;;;;;ACRtD;AAAA;AAAa;;AAEN;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA,uBAAuB,0BAA0B;;AAEjD;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB;AACrB;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,2BAA2B,2BAA2B;AACtD;;AAEA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;;AAEA;AACA;AACA;AACA,4CAA4C,OAAO;AACnD,+BAA+B,uBAAuB;;AAEtD;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,iBAAiB;AACjB;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,CAAC,E;;;;;;;;;;;;AChOD;AAAA;AAAA;AAAwD;;AAEjD;;AAEP,qCAAqC,sEAAiB,E;;;;;;;;;;;;ACJtD;AAAA;AAAa;;AAEN;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,oDAAoD,YAAY;AAChE;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,mDAAmD,YAAY;AAC/D;AACA,iBAAiB;AACjB;;AAEA;AACA;AACA;AACA;AACA;AACA,CAAC,E;;;;;;;;;;;;AChCD;AAAA;AAAA;AAAa;;AAEb;AAC+C;;AAExC;AACP;AACA;AACA;;AAEA,6BAA6B,6DAAa;;;;;;;;;;;;;ACV1C;AAAA;AAAa;;AAEN;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,uBAAuB,2BAA2B;;AAElD;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,+BAA+B,UAAU;;AAEzC;AACA;AACA;AACA,6BAA6B;AAC7B;;AAEA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,CAAC,E","file":"framedList.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"../src/index.js\");\n","module.exports = function(originalModule) {\n\tif (!originalModule.webpackPolyfill) {\n\t\tvar module = Object.create(originalModule);\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"exports\", {\n\t\t\tenumerable: true\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","import {onScroll} from \"./on-scroll.directive\";\n\nexport const coreDirectivesModule = angular.module('core.directives', [\n    'core.services'\n]);\n\ncoreDirectivesModule.directive('onScroll', onScroll);","'use strict';\n\nexport const onScroll = ['$parse', 'utils', ($parse, utils) => {\n    return {\n        restrict: 'A',\n        link: (scope, el, attrs) => {\n            const debounce = Number(attrs.debounce);\n            const cb = $parse(attrs.onScroll);\n            const onScroll = utils.debounce((evt) => {\n                cb(scope, {event: evt});\n            }, debounce);\n\n            el.on('scroll', onScroll);\n\n            el.on('$destroy', () => {\n                el.off('scroll', onScroll);\n            });\n        }\n    };\n}];","import {coreDirectivesModule} from \"./directives\";\nimport {coreServicesModule} from \"./services\";\n\nexport const coreModule = angular.module('core', [\n    coreDirectivesModule.name,\n    coreServicesModule.name\n]);","import {utils} from \"./utils.service\";\n\nexport const coreServicesModule = angular.module('core.services', []);\n\ncoreServicesModule.factory('utils', utils);","'use strict';\n\nexport const utils = ['$timeout', ($timeout) => {\n    const debounce = (func, time) => {\n        let lastTimeCalled = Date.now();\n        let timeoutDeferred = null;\n\n        const startTimer = (f) => {\n            timeoutDeferred = $timeout(f, time);\n        };\n\n        return (...args) => {\n            if(timeoutDeferred !== null) {\n                $timeout.cancel(timeoutDeferred);\n            }\n\n            if(lastTimeCalled <= (Date.now() - time)) {\n                timeoutDeferred = null;\n                func(...args);\n            } else {\n                startTimer(() => func(...args));\n            }\n\n            lastTimeCalled = Date.now();\n        };\n    };\n\n    const throttle = (func, time) => {\n        let timeoutDeferred = null;\n\n        return (...args) => {\n            if(timeoutDeferred !== null) {\n                return;\n            }\n\n            timeoutDeferred = $timeout(() => {\n                func(...args);\n                $timeout.cancel(timeoutDeferred);\n                timeoutDeferred = null;\n            }, time);\n        };\n    };\n\n    return {\n        debounce,\n        throttle\n    };\n\n}];","'use strict';\n\nimport {coreModule} from \"./core\";\nimport {lazyListModule} from \"./lazy-list\";\nimport {listModule} from \"./list\";\nimport {listItemModule} from \"./list-item\";\n\nmodule.exports = angular.module('framedList', [\n    coreModule.name,\n    listItemModule.name,\n    listModule.name,\n    lazyListModule.name\n]);\n\n// function ListTest($scope, $filter, utils) {\n//     this.list = (new Array(50000)).fill(1).map((_, idx) => `Lorem ipsum dolor sit amet consectetur, adipisicing elit. Modi, porro. ${idx}`);\n//     this.filtered = this.list;\n//     const filter = $filter('filter');\n//     this.query = '';\n//\n//     this.onQuery = utils.debounce(() => {\n//         this.filtered = filter(this.list, this.query);\n//     }, 500);\n//\n// }\n//\n// ListTest.$inject = ['$scope', '$filter', 'utils'];\n//\n// app.controller('ListTest', ListTest);","import {lazyListDirective} from \"./lazy-list.component\";\n\nexport const lazyListModule = angular.module('lazyList', [\n    'core',\n    'list',\n    'list-item'\n]);\n\nlazyListModule.directive('lazyList', lazyListDirective);","'use strict';\n\nexport const lazyListDirective = ['$parse', '$window', 'utils', ($parse, $window, utils) => {\n    return {\n        restrict: 'A',\n        require: 'list',\n        link: (scope, el, attrs, listController) => {\n            const listUnscrollable = $parse(attrs.onUnscrollable);\n            const listTooLong = $parse(attrs.onTooLong);\n            const nativeElement = el[0];\n            let batchLength = Number(attrs.batchLength);\n            let watchers = [];\n            let fullList = [];\n\n            scope.batchedList = [];\n\n            if(!Number.isFinite(batchLength)) {\n                batchLength = listController.DEFAULT_BATCH_LENGTH;\n            }\n\n            const getOverflowPoint = (batchLength) => {\n                return batchLength * listController.MIN_SCROLLBAR_FACTOR;\n            };\n\n            const idxes = {\n                start: null,\n                end: null\n            };\n\n            const setIndices = (start, end) => {\n                idxes.start = start;\n                idxes.end = end;\n            };\n\n            const applyToStartIndex = (startIdxFn) => {\n                const start = startIdxFn(idxes.start);\n\n                if(Number.isFinite(start)) {\n                    return start > 0 ? start : 0;\n                }\n            };\n\n            const applyToEndIdx = (endIdxFn) => {\n                const end = endIdxFn(idxes.end);\n\n                if(Number.isFinite(end)) {\n                    return end > fullList.length ? fullList.length : end;\n                }\n\n                return idxes.end;\n            };\n\n            const getSlicedList = (start, end) => {\n                return Array.prototype.slice.call(fullList || [], start, end);\n            };\n\n            const getBatch = () => {\n                return getSlicedList(idxes.start, idxes.end);\n            };\n\n            const initIndices = () => {\n                setIndices(0, getOverflowPoint(batchLength));\n            };\n\n            const updateSliceIndices = (updateFn) => {\n                setIndices(\n                    applyToStartIndex(updateFn),\n                    applyToEndIdx(updateFn)\n                );\n            };\n\n            const increaseIndices = (increaseBy) => {\n                updateSliceIndices((index) => {\n                    return index + increaseBy;\n                });\n            };\n\n            const decreaseIndices = (decreaseBy) => {\n                updateSliceIndices((index) => {\n                    return index - decreaseBy;\n                });\n            };\n\n            const getPrevBatch = () => {\n                decreaseIndices(batchLength);\n\n                return getBatch();\n            };\n\n            const getNextBatch = () => {\n                increaseIndices(batchLength);\n\n                return getBatch();\n            };\n\n            const initBatchedList = () => {\n                initIndices();\n                scope.batchedList = getBatch();\n            };\n\n            const tooSmallBatchLength = () => {\n                batchLength += listController.ADD_COUNT_IF_UNSCROLLABLE;\n                const listLength = fullList.length;\n\n                if(listLength > batchLength) {\n                    initBatchedList();\n                } else {\n                    batchLength = listLength;\n                    scope.batchedList = fullList;\n                }\n            };\n\n            const tooBigBatchLength = () => {\n                const {ADD_COUNT_IF_UNSCROLLABLE} = listController;\n\n                if(batchLength <= ADD_COUNT_IF_UNSCROLLABLE) {\n                    return;\n                }\n\n                batchLength -= ADD_COUNT_IF_UNSCROLLABLE;\n                // TODO: fix jumping to start of list when list is too long\n                initBatchedList();\n            };\n\n            scope.toTop = () => {\n                if(fullList && fullList.length) {\n                    nativeElement.scrollTop = 0;\n\n                    return initBatchedList();\n                }\n            };\n\n            scope.toBottom = () => {\n                const listLength = fullList.length;\n\n                if(listLength && idxes.end < listLength) {\n                    setIndices(listLength - getOverflowPoint(batchLength), listLength);\n                    scope.batchedList = getBatch();\n\n                    requestAnimationFrame(() => {\n                        nativeElement.scrollTop = nativeElement.scrollHeight;\n                    });\n                }\n            };\n\n            scope.onTop = () => {\n                if(idxes.start <= 0) {\n                    return;\n                }\n\n                scope.batchedList = getPrevBatch(fullList);\n\n                listController.firstListItem.scrollIntoView();\n            };\n\n            scope.onBottom = () => {\n                const listLength = fullList.length;\n\n                if(listLength) {\n                    if(idxes.end >= listLength) {\n                        return;\n                    }\n\n                    scope.batchedList = getNextBatch(fullList);\n                }\n            };\n\n            scope.adjustListHeight = () => {\n                const nativeListItemElement = listController.lastListItem;\n\n                requestAnimationFrame(() => {\n                    // read values on frame started\n                    const {scrollHeight, clientHeight} = nativeElement;\n                    const listMinHeight = Math.round(clientHeight * listController.MIN_SCROLLBAR_FACTOR);\n\n                    // check first simplest computations\n                    if(scrollHeight < listMinHeight) {\n                        return scope.$apply(() => {\n                            tooSmallBatchLength();\n                            listUnscrollable(scope);\n                        });\n                    }\n\n                    // check if after removing 'batchLength' items\n                    // we still have too long list\n                    let prevElement = nativeListItemElement;\n                    for(let i = batchLength; i > 0; i--) {\n                        const {previousElementSibling} = prevElement;\n\n                        if(!previousElementSibling) {\n                            return;\n                        }\n\n                        prevElement = previousElementSibling;\n                    }\n\n                    if (listMinHeight < prevElement.offsetTop) {\n                        scope.$apply(() => {\n                            tooBigBatchLength();\n                            listTooLong(scope);\n                        });\n                    }\n                });\n            };\n\n            const adjustListHeight = utils.throttle(scope.adjustListHeight, 300);\n\n            angular.element($window).on('resize', adjustListHeight);\n\n            watchers.push(\n                scope.$watch(attrs.lazyList, (list) => {\n                    fullList = list;\n                    initBatchedList();\n                })\n            );\n\n            watchers.push(\n                scope.$on('$destroy', () => {\n                    watchers.forEach(off => off());\n                    angular.element($window).off('resize', adjustListHeight);\n                })\n            );\n        }\n    };\n}];","import {listItemDirective} from \"./list-item.directive\";\n\nexport const listItemModule = angular.module('list-item', []);\n\nlistItemModule.directive('listItem', listItemDirective);","'use strict';\n\nexport const listItemDirective = ['$parse', ($parse) => {\n    return {\n        restrict: 'A',\n        link: (scope, el, attrs) => {\n            const onFirstItemRendered = $parse(attrs.onFirstRendered);\n            const onLastItemRendered = $parse(attrs.onLastRendered);\n            const watchers = [];\n\n            watchers.push(\n                // necessary to constantly watch because when scrollbar is at bottom\n                // and we remove elements from top, elements in the middle become first\n                scope.$watch('$first', isFirst => {\n                    if(isFirst) {\n                        onFirstItemRendered(scope, {element: el});\n                    }\n                }),\n                // necessary to constantly watch because when scrollbar is at top\n                // and we remove elements from bottom, elements in the middle become last\n                scope.$watch('$last', isLast => {\n                    if(isLast) {\n                        onLastItemRendered(scope, {element: el});\n                    }\n                })\n            );\n\n            watchers.push(\n                scope.$on('$destroy', () => watchers.forEach(off => off()))\n            );\n        }\n    };\n}];","'use strict';\n\n//import './list.css';\nimport {listDirective} from \"./list.component\";\n\nexport const listModule = angular.module('list', [\n    'core',\n    'list-item'\n]);\n\nlistModule.directive('list', listDirective);\n","'use strict';\n\nexport const listDirective = ['$parse', '$log', ($parse, $log) => {\n    return {\n        restrict: 'A',\n        controller: function ListController() {\n            this.$onInit = () => {\n                this.firstListItem = null;\n                this.lastListItem = null;\n                this.MIN_EDGE = 1;\n                this.ADD_COUNT_IF_UNSCROLLABLE = 2;\n                this.MIN_SCROLLBAR_FACTOR = 2;\n                this.DEFAULT_BATCH_LENGTH = 20;\n            };\n        },\n        link: (scope, el, attrs, listController) => {\n            const nativeElement = el[0];\n            const onTop = $parse(attrs.onTopList);\n            const onBottom = $parse(attrs.onBottomList);\n\n            const isAtTop = (scrollTop) => {\n                return scrollTop < listController.MIN_EDGE;\n            };\n\n            const isAtBottom = (scrollTop) => {\n                const {clientHeight, scrollHeight} = nativeElement;\n                \n                return ((scrollHeight - scrollTop) - clientHeight) < listController.MIN_EDGE;\n            };\n\n            scope.firstItemRendered = (item) => {\n                listController.firstListItem = item[0];\n\n                return true;\n            };\n\n            scope.lastItemRendered = (item) => {\n                listController.lastListItem = item[0];\n\n                return true;\n            };\n\n            if(scope.hasOwnProperty('onScroll')) {\n                $log.error('scope already has onScroll property. Please rename it to be able to use onScroll event.');\n            } else {\n                scope.onScroll = (evt) => {\n                    if(evt.defaultPrevented) {\n                        return;\n                    }\n                    \n                    // read scroll values at start of next frame\n                    // to avoid recalculation styles before js in the middle of frame\n                    requestAnimationFrame(() => {\n                        const {scrollTop} = nativeElement;\n\n                        if(isAtTop(scrollTop)) {\n                            return scope.$apply(() => {\n                                onTop(scope);\n                            });\n                        }\n    \n                        if(isAtBottom(scrollTop)) {\n                            return scope.$apply(() => {\n                                onBottom(scope);\n                            });\n                        }\n                    });\n                };\n            }\n        }\n    };\n}];"],"sourceRoot":""}